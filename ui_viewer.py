# -*- coding: utf-8 -*-
"""
Flask Web Application to display comparison results from the
'*_processed.xlsx' file generated by 'excel_comparator.py'.

Features:
- Finds the latest '*_processed.xlsx' file.
- Separate pages for each comparison type (VQs, Skills, etc.).
- Handles specific 5-column layout for 'Skill_exprs Comparison'.
- Server-side pagination with selectable page size (100, 200, 500, 1000, All).
- Server-side sorting by relevant columns for each view.
- Displays data in a web browser using Flask and Tailwind CSS.
- Includes Configuration Template Management section.
- Allows applying templates to selected rows to generate update payloads.
"""

import os
import sys
import glob
import logging
import math
from flask import Flask, render_template_string, abort, request, redirect, url_for, jsonify # Added jsonify
import openpyxl
from openpyxl.utils.exceptions import InvalidFileException
from typing import List, Dict, Any, Optional, Tuple

# --- Import Blueprints ---
# Make sure these files exist in the same directory
try:
    from template_routes import template_bp
    from update_routes import update_bp
except ImportError as e:
    print(f"ERROR: Could not import Blueprints. Make sure 'template_routes.py' and 'update_routes.py' exist. Details: {e}")
    # Optionally exit if blueprints are critical
    # sys.exit(1)
    # Or handle gracefully later if possible
    template_bp = None
    update_bp = None


# --- Constants ---
LOG_FILE_UI = 'ui_viewer.log'
DEFAULT_PAGE_SIZE = 100
PAGE_SIZE_OPTIONS = [100, 200, 500, 1000] # Numeric options
COMPARISON_SUFFIX = " Comparison"
SKILL_EXPR_SHEET_NAME = "Skill_exprs Comparison" # Constant for the special sheet
TEMPLATE_DIR = './config_templates/' # Define template dir constant here too

# --- Logging Setup ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(funcName)s] - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE_UI, mode='w'),
        logging.StreamHandler()
    ]
)
for handler in logging.getLogger().handlers:
    if isinstance(handler, logging.StreamHandler):
        handler.setLevel(logging.INFO)
        formatter = logging.Formatter('%(levelname)s: %(message)s')
        handler.setFormatter(formatter)

# --- Flask App Initialization ---
app = Flask(__name__)
app.config['EXCEL_DATA'] = {} # Simple cache for Excel data
app.config['EXCEL_FILENAME'] = None
app.config['COMPARISON_SHEETS'] = []

# --- Register Blueprints ---
if template_bp:
    app.register_blueprint(template_bp)
if update_bp:
    app.register_blueprint(update_bp)


# --- HTML Template (FIXED pagination check) ---
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }} - Comparison Report</title>
    <script src="https://cdn.tailwindcss.com?plugins=typography"></script>
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    <style>
        tbody tr:nth-child(odd) { background-color: #f9fafb; } /* gray-50 */
        tbody tr:hover { background-color: #f3f4f6; } /* gray-100 */
        tbody tr.selected-row { background-color: #dbeafe !important; } /* blue-100 */
        th a { display: inline-flex; align-items: center; gap: 0.25rem; }
        th a:hover { text-decoration: underline; }
        .sort-icon { width: 1em; height: 1em; stroke-width: 2; }
        .table-fixed-layout { table-layout: fixed; width: 100%; }
        /* Action Bar Styles */
        #actionBar {
            transition: transform 0.3s ease-in-out;
            transform: translateY(100%); /* Start hidden below */
        }
        #actionBar.visible {
            transform: translateY(0); /* Slide in */
        }
    </style>
</head>
<body class="bg-gray-100 font-sans pb-20"> {# Added padding-bottom #}
    <div class="container mx-auto p-4 sm:p-6 lg:p-8">
        <h1 class="text-3xl font-bold text-gray-800 mb-4">Excel vs API Comparison Report</h1>
        <p class="mb-4 text-sm text-gray-500">Source File: <code class="bg-gray-200 px-1 rounded">{{ filename }}</code></p>

        {# Navigation Tabs #}
        <div class="mb-6 border-b border-gray-300">
            <nav class="-mb-px flex space-x-6" aria-label="Tabs">
                {# Links to Comparison Views #}
                {% for sheet in available_sheets %}
                    <a href="{{ url_for('view_comparison', comparison_type=sheet, sort_by=sort_by, order=sort_order, size=page_size_str) }}"
                       class="whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm
                              {% if sheet == current_comparison_type %} border-indigo-500 text-indigo-600
                              {% else %} border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 {% endif %}">
                        {{ sheet.replace(comparison_suffix, '') }}
                    </a>
                {% endfor %}
                {# Link to Template Manager #}
                <a href="{{ url_for('templates.template_manager_page') }}"
                   class="whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300">
                   Config Templates
                </a>
                 <a href="{{ url_for('refresh_data') }}" title="Reload data from Excel file"
                    class="ml-auto py-3 px-1 text-sm font-medium text-gray-500 hover:text-indigo-600">
                    <i data-lucide="refresh-cw" class="inline-block w-4 h-4"></i> Reload Data
                 </a>
            </nav>
        </div>

        {# General Error Display Area #}
        <div id="generalMessageArea" class="mb-4">
            {% if error %}
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                    <strong class="font-bold">Error:</strong> <span class="block sm:inline">{{ error }}</span>
                </div>
            {% endif %}
             {# Check pagination exists before accessing total_items #}
             {% if not page_data and not error and (not pagination or pagination.total_items == 0) %}
                 <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative" role="alert">
                    <strong class="font-bold">Note:</strong>
                    <span class="block sm:inline">No differences found or reported for this category.</span>
                </div>
            {% endif %}
        </div>

        {# Main Content Area - Table - Check pagination exists AND has items #}
        {% if pagination and pagination.total_items > 0 %}
            <div class="bg-white shadow-md rounded-lg overflow-hidden">
                <h2 class="text-xl font-semibold text-gray-700 bg-gray-100 px-6 py-3 border-b flex justify-between items-center">
                    <span>{{ current_comparison_type }}</span>
                    <span id="selectionCount" class="text-sm font-normal text-gray-600 mr-4" style="display: none;">0 rows selected</span>
                </h2>
                <div class="overflow-x-auto p-3">
                    <table id="dataTable" class="min-w-full divide-y divide-gray-200 table-fixed-layout">
                        <thead class="bg-gray-50">
                             {# --- Conditional Headers --- #}
                            {% if current_comparison_type == skill_expr_sheet_name %}
                                {# 5 Columns + Checkbox for Skill Exprs #}
                                <tr>
                                    <th scope="col" class="w-10 px-4 py-3 text-center">
                                        <input type="checkbox" id="selectAllCheckbox" onchange="toggleSelectAll(this.checked)"
                                               class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                                    </th>
                                    <th scope="col" class="w-1/4 px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        <a href="{{ url_for('view_comparison', comparison_type=current_comparison_type, page=1, size=page_size_str, sort_by='Concatenated Key', order='desc' if sort_by == 'Concatenated Key' and sort_order == 'asc' else 'asc') }}">
                                            Concatenated Key {% if sort_by == 'Concatenated Key' %} <i data-lucide="{{ 'arrow-up' if sort_order == 'asc' else 'arrow-down' }}" class="sort-icon"></i> {% endif %}
                                        </a>
                                    </th>
                                    <th scope="col" class="w-1/4 px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        <a href="{{ url_for('view_comparison', comparison_type=current_comparison_type, page=1, size=page_size_str, sort_by='Expression', order='desc' if sort_by == 'Expression' and sort_order == 'asc' else 'asc') }}">
                                            Expression {% if sort_by == 'Expression' %} <i data-lucide="{{ 'arrow-up' if sort_order == 'asc' else 'arrow-down' }}" class="sort-icon"></i> {% endif %}
                                        </a>
                                    </th>
                                    <th scope="col" class="w-1/4 px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        <a href="{{ url_for('view_comparison', comparison_type=current_comparison_type, page=1, size=page_size_str, sort_by='Ideal Expression', order='desc' if sort_by == 'Ideal Expression' and sort_order == 'asc' else 'asc') }}">
                                            Ideal Expression {% if sort_by == 'Ideal Expression' %} <i data-lucide="{{ 'arrow-up' if sort_order == 'asc' else 'arrow-down' }}" class="sort-icon"></i> {% endif %}
                                        </a>
                                    </th>
                                    <th scope="col" class="w-auto px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                         <a href="{{ url_for('view_comparison', comparison_type=current_comparison_type, page=1, size=page_size_str, sort_by='ID', order='desc' if sort_by == 'ID' and sort_order == 'asc' else 'asc') }}">
                                            ID {% if sort_by == 'ID' %} <i data-lucide="{{ 'arrow-up' if sort_order == 'asc' else 'arrow-down' }}" class="sort-icon"></i> {% endif %}
                                        </a>
                                    </th>
                                    <th scope="col" class="w-1/5 px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                         <a href="{{ url_for('view_comparison', comparison_type=current_comparison_type, page=1, size=page_size_str, sort_by='Status', order='desc' if sort_by == 'Status' and sort_order == 'asc' else 'asc') }}">
                                            Status {% if sort_by == 'Status' %} <i data-lucide="{{ 'arrow-up' if sort_order == 'asc' else 'arrow-down' }}" class="sort-icon"></i> {% endif %}
                                        </a>
                                    </th>
                                </tr>
                            {% else %}
                                {# 3 Columns + Checkbox for Others #}
                                <tr>
                                     <th scope="col" class="w-10 px-4 py-3 text-center">
                                        <input type="checkbox" id="selectAllCheckbox" onchange="toggleSelectAll(this.checked)"
                                               class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                                    </th>
                                    <th scope="col" class="w-3/5 px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        <a href="{{ url_for('view_comparison', comparison_type=current_comparison_type, page=1, size=page_size_str, sort_by='Item', order='desc' if sort_by == 'Item' and sort_order == 'asc' else 'asc') }}">
                                            {{ page_data[0].get('Header', 'Item') if page_data else 'Item' }}
                                            {% if sort_by == 'Item' %} <i data-lucide="{{ 'arrow-up' if sort_order == 'asc' else 'arrow-down' }}" class="sort-icon"></i> {% endif %}
                                        </a>
                                    </th>
                                    <th scope="col" class="w-1/5 px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                         <a href="{{ url_for('view_comparison', comparison_type=current_comparison_type, page=1, size=page_size_str, sort_by='ID', order='desc' if sort_by == 'ID' and sort_order == 'asc' else 'asc') }}">
                                            ID (from API) {% if sort_by == 'ID' %} <i data-lucide="{{ 'arrow-up' if sort_order == 'asc' else 'arrow-down' }}" class="sort-icon"></i> {% endif %}
                                        </a>
                                    </th>
                                    <th scope="col" class="w-1/5 px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                         <a href="{{ url_for('view_comparison', comparison_type=current_comparison_type, page=1, size=page_size_str, sort_by='Status', order='desc' if sort_by == 'Status' and sort_order == 'asc' else 'asc') }}">
                                            Status {% if sort_by == 'Status' %} <i data-lucide="{{ 'arrow-up' if sort_order == 'asc' else 'arrow-down' }}" class="sort-icon"></i> {% endif %}
                                        </a>
                                    </th>
                                </tr>
                            {% endif %}
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            {% for row in page_data %}
                                {# Determine the unique identifier for this row #}
                                {% set row_id = row.get('Concatenated Key') if current_comparison_type == skill_expr_sheet_name else row.get('Item') %}
                                <tr id="row-{{ loop.index0 }}" data-row-id="{{ row_id | default('', True) }}"> {# Use loop index for unique DOM id #}
                                    <td class="px-4 py-3 text-center">
                                        <input type="checkbox" name="rowSelection" value="{{ row_id | default('', True) }}" onchange="handleRowSelectionChange()"
                                               class="row-checkbox h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                                    </td>
                                    {% if current_comparison_type == skill_expr_sheet_name %}
                                        {# 5 Columns for Skill Exprs #}
                                        <td class="px-4 py-3 text-sm text-gray-900 break-words">{{ row.get('Concatenated Key', '') | default('', True) }}</td>
                                        <td class="px-4 py-3 text-sm text-gray-500 break-words">{{ row.get('Expression', '') | default('', True) }}</td>
                                        <td class="px-4 py-3 text-sm text-gray-500 break-words">{{ row.get('Ideal Expression', '') | default('', True) }}</td>
                                        <td class="px-4 py-3 text-sm text-gray-500 break-words">{{ row.get('ID', '') | default('', True) }}</td>
                                        <td class="px-4 py-3 text-sm font-medium break-words {% if 'New' in row.get('Status', '') %} text-green-600 {% elif 'Missing' in row.get('Status', '') %} text-red-600 {% else %} text-gray-600 {% endif %}">
                                            {{ row.get('Status', '') | default('', True) }}
                                        </td>
                                    {% else %}
                                         {# 3 Columns for Others #}
                                        <td class="px-4 py-3 text-sm text-gray-900 break-words">{{ row.get('Item', '') | default('', True) }}</td>
                                        <td class="px-4 py-3 text-sm text-gray-500 break-words">{{ row.get('ID', '') | default('', True) }}</td>
                                        <td class="px-4 py-3 text-sm font-medium break-words {% if 'New' in row.get('Status', '') %} text-green-600 {% elif 'Missing' in row.get('Status', '') %} text-red-600 {% else %} text-gray-600 {% endif %}">
                                            {{ row.get('Status', '') | default('', True) }}
                                        </td>
                                    {% endif %}
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>

                {# Pagination and Page Size Controls #}
                <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
                     <div class="flex items-center text-sm text-gray-700">
                         <label for="pageSize" class="mr-2">Show:</label>
                         <select id="pageSize" name="size" class="border border-gray-300 rounded-md text-sm p-1"
                                 onchange="handlePageSizeChange(this.value)">
                             {% for size_option in page_size_options %}
                                 <option value="{{ size_option }}" {% if page_size_str == size_option|string %}selected{% endif %}>{{ size_option }}</option>
                             {% endfor %}
                             <option value="all" {% if page_size_str == 'all' %}selected{% endif %}>All</option>
                         </select>
                         <span class="ml-2">results per page</span>
                     </div>
                     <div class="flex items-center">
                         <p class="text-sm text-gray-700 mr-4 hidden md:block">
                             Showing <span class="font-medium">{{ pagination.start_item }}</span> to <span class="font-medium">{{ pagination.end_item }}</span> of <span class="font-medium">{{ pagination.total_items }}</span> results
                         </p>
                         {% if pagination.total_pages > 1 %}
                         <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                              <a href="{{ url_for('view_comparison', comparison_type=current_comparison_type, page=pagination.prev_num, size=page_size_str, sort_by=sort_by, order=sort_order) if pagination.has_prev else '#' }}"
                                 class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 {% if not pagination.has_prev %} opacity-50 cursor-not-allowed {% endif %}">
                                  <span class="sr-only">Previous</span><i data-lucide="chevron-left" class="h-5 w-5"></i>
                              </a>
                              <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hidden sm:inline-flex">
                                Page {{ pagination.page }} of {{ pagination.total_pages }}
                              </span>
                              <a href="{{ url_for('view_comparison', comparison_type=current_comparison_type, page=pagination.next_num, size=page_size_str, sort_by=sort_by, order=sort_order) if pagination.has_next else '#' }}"
                                 class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 {% if not pagination.has_next %} opacity-50 cursor-not-allowed {% endif %}">
                                  <span class="sr-only">Next</span><i data-lucide="chevron-right" class="h-5 w-5"></i>
                              </a>
                         </nav>
                         {% endif %}
                     </div>
                 </div>
            </div>
        {% endif %} {# End if pagination and pagination.total_items > 0 #}
    </div>{# End Container #}

    {# Action Bar (Fixed at bottom, initially hidden) #}
    <div id="actionBar" class="fixed bottom-0 left-0 right-0 bg-gray-800 text-white p-3 shadow-lg flex items-center justify-between z-10">
        <span id="actionBarMessage" class="text-sm font-medium">Select rows to apply configuration.</span>
        <div class="flex items-center space-x-4">
             <label for="templateSelect" class="text-sm">Apply Template:</label>
             <select id="templateSelect" name="template" class="text-black border border-gray-300 rounded-md text-sm p-1.5">
                 <option value="">Loading templates...</option>
             </select>
             <button id="applyButton" onclick="applyConfiguration()" disabled
                     class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-1.5 rounded-md text-sm disabled:opacity-50 disabled:cursor-not-allowed">
                 Apply & Update DB
             </button>
        </div>
    </div>

    <script>
      lucide.createIcons();

      const actionBar = document.getElementById('actionBar');
      const actionBarMessage = document.getElementById('actionBarMessage');
      const applyButton = document.getElementById('applyButton');
      const templateSelect = document.getElementById('templateSelect');
      const selectionCountEl = document.getElementById('selectionCount');
      const selectAllCheckbox = document.getElementById('selectAllCheckbox');
      const rowCheckboxes = document.querySelectorAll('.row-checkbox');
      const generalMessageArea = document.getElementById('generalMessageArea'); // Area for apply results

      // --- Page Size Change ---
      function handlePageSizeChange(newSize) {
        const url = new URL(window.location.href);
        url.searchParams.set('size', newSize);
        url.searchParams.set('page', '1'); // Reset to page 1
        window.location.href = url.toString();
      }

      // --- Row Selection Handling ---
      let selectedRowCount = 0;

      function updateSelectionCount() {
          selectedRowCount = document.querySelectorAll('.row-checkbox:checked').length;
          if (selectionCountEl) {
              if (selectedRowCount > 0) {
                 selectionCountEl.textContent = `${selectedRowCount} row${selectedRowCount > 1 ? 's' : ''} selected`;
                 selectionCountEl.style.display = 'inline';
              } else {
                 selectionCountEl.style.display = 'none';
              }
          }
          // Toggle action bar visibility
          if (selectedRowCount > 0) {
              actionBar.classList.add('visible');
              actionBarMessage.textContent = `${selectedRowCount} row${selectedRowCount > 1 ? 's' : ''} selected.`;
              applyButton.disabled = templateSelect.value === ""; // Enable button only if a template is selected
          } else {
              actionBar.classList.remove('visible');
              actionBarMessage.textContent = 'Select rows to apply configuration.';
              applyButton.disabled = true;
          }
          // Update Select All checkbox state
          if (selectAllCheckbox) {
              const totalCheckboxes = rowCheckboxes.length;
              selectAllCheckbox.checked = (totalCheckboxes > 0 && selectedRowCount === totalCheckboxes);
              // Make indeterminate only if some, but not all, are checked
              selectAllCheckbox.indeterminate = (selectedRowCount > 0 && selectedRowCount < totalCheckboxes);
          }
      }

      function handleRowSelectionChange() {
          // Add/remove highlight class (optional)
          document.querySelectorAll('.row-checkbox').forEach(cb => {
              const row = cb.closest('tr');
              if (row) {
                  row.classList.toggle('selected-row', cb.checked);
              }
          });
          updateSelectionCount();
      }

      function toggleSelectAll(checked) {
          rowCheckboxes.forEach(checkbox => {
              checkbox.checked = checked;
              const row = checkbox.closest('tr');
               if (row) {
                  row.classList.toggle('selected-row', checked);
              }
          });
          updateSelectionCount();
      }

      // Attach listeners to existing checkboxes on page load
      document.addEventListener('DOMContentLoaded', () => {
          rowCheckboxes.forEach(checkbox => {
              checkbox.addEventListener('change', handleRowSelectionChange);
          });
          if (selectAllCheckbox) {
             selectAllCheckbox.addEventListener('change', (e) => toggleSelectAll(e.target.checked));
          }
          loadTemplatesForDropdown(); // Load templates into dropdown
          updateSelectionCount(); // Initial check in case of back navigation
      });

      // --- Template Loading for Dropdown ---
      async function loadTemplatesForDropdown() {
          try {
              const response = await fetch('{{ url_for("templates.list_templates") }}');
              if (!response.ok) throw new Error('Failed to fetch templates');
              const templates = await response.json();

              templateSelect.innerHTML = '<option value="">-- Select Template --</option>'; // Default option
              if (templates.length > 0) {
                  templates.forEach(filename => {
                      const option = document.createElement('option');
                      option.value = filename;
                      option.textContent = filename.replace('.json', '');
                      templateSelect.appendChild(option);
                  });
                   templateSelect.disabled = false;
              } else {
                   templateSelect.innerHTML = '<option value="">No templates found</option>';
                   templateSelect.disabled = true; // Disable if no templates
              }
          } catch (error) {
              console.error('Error loading templates for dropdown:', error);
              templateSelect.innerHTML = '<option value="">Error loading</option>';
              templateSelect.disabled = true;
          }
      }
      // Update apply button state when template selection changes
       templateSelect.addEventListener('change', () => {
            applyButton.disabled = selectedRowCount === 0 || templateSelect.value === "";
       });


      // --- Apply Configuration ---
      async function applyConfiguration() {
            const selectedTemplate = templateSelect.value;
            const checkedBoxes = document.querySelectorAll('.row-checkbox:checked');
            // Get the identifier from the 'value' attribute of the checkbox
            const selectedIds = Array.from(checkedBoxes).map(cb => cb.value).filter(id => id);

            if (!selectedTemplate) {
                alert('Please select a configuration template.');
                return;
            }
            if (selectedIds.length === 0) {
                alert('Please select at least one row to apply the configuration.');
                return;
            }

            // Disable button during processing
            applyButton.disabled = true;
            applyButton.textContent = 'Processing...';
            // Show general message area for feedback
            generalMessageArea.innerHTML = `<div class="bg-blue-100 border border-blue-300 text-blue-700 px-4 py-3 rounded relative animate-pulse" role="alert">Applying configuration...</div>`;


            try {
                const response = await fetch('{{ url_for("updates.apply_configuration") }}', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        templateName: selectedTemplate,
                        selectedRowsData: selectedIds // Send identifiers
                    })
                });

                const result = await response.json(); // Always expect JSON back

                if (response.ok) { // Status 200-299
                     let messageClass = 'bg-green-100 border-green-300 text-green-700';
                     let title = 'Success';
                     // Check for partial success reported by backend
                     if (response.status === 207 || (result.status && result.status.includes('Partial'))) {
                         messageClass = 'bg-yellow-100 border-yellow-300 text-yellow-700';
                         title = 'Partial Success / Warnings';
                     }
                     generalMessageArea.innerHTML = `<div class="${messageClass} px-4 py-3 rounded relative border" role="alert">
                        <strong class="font-bold">${title}:</strong> ${result.message || 'Configuration applied.'} (Payloads logged server-side)
                        ${result.errors ? `<br><span class='text-xs'>Errors: ${result.errors.join(', ')}</span>` : ''}
                     </div>`;
                     // Optionally clear selection after success/partial success
                     // toggleSelectAll(false);
                } else {
                    // Handle specific error messages from backend if available
                    throw new Error(result.error || `Request failed with status ${response.status}`);
                }

            } catch (error) {
                console.error('Error applying configuration:', error);
                 generalMessageArea.innerHTML = `<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                    <strong class="font-bold">Error:</strong> Failed to apply configuration. ${error.message}. Check server logs.
                 </div>`;
            } finally {
                // Re-enable button and restore text
                 applyButton.disabled = selectedRowCount === 0 || templateSelect.value === ""; // Re-evaluate disabled state
                 applyButton.textContent = 'Apply & Update DB';
                 // Optional: Auto-hide message after some time
                 // setTimeout(() => { generalMessageArea.innerHTML = ''; }, 10000);
            }
      }

    </script>
</body>
</html>
"""

# --- Helper Functions ---
# find_latest_processed_file (no changes)
def find_latest_processed_file() -> Optional[str]:
    """Finds the most recently modified '*_processed.xlsx' file in the current directory."""
    try: list_of_files = glob.glob('*_processed.xlsx'); return max(list_of_files, key=os.path.getmtime) if list_of_files else None
    except Exception as e: logging.error(f"Error finding latest processed file: {e}", exc_info=True); return None

# read_comparison_data (no changes needed from v3)
def read_comparison_data(filename: str) -> bool:
    """ Reads data from '* Comparison' sheets into app config cache. Handles 5 columns specifically for Skill_exprs Comparison. Returns True on success, False on failure. """
    global app; comparison_data = {}; workbook = None; comparison_sheet_names = []
    try:
        logging.info(f"Attempting to load workbook: {filename}"); workbook = openpyxl.load_workbook(filename, read_only=True, data_only=True); logging.info(f"Workbook loaded. Sheets: {workbook.sheetnames}")
        comparison_sheet_names = sorted([s for s in workbook.sheetnames if s.endswith(COMPARISON_SUFFIX)]); logging.info(f"Found comparison sheets: {comparison_sheet_names}")
        if not comparison_sheet_names: logging.warning(f"No sheets ending with '{COMPARISON_SUFFIX}' found."); app.config['EXCEL_DATA'] = {}; app.config['COMPARISON_SHEETS'] = []; app.config['EXCEL_FILENAME'] = filename; return True
        for sheet_name in comparison_sheet_names:
            sheet = workbook[sheet_name]; data: List[Dict[str, Any]] = []
            try: headers = [cell.value for cell in sheet[1]]
            except IndexError: logging.warning(f"Sheet '{sheet_name}' empty/no header. Skipping."); continue
            is_skill_expr_sheet = (sheet_name == SKILL_EXPR_SHEET_NAME); max_cols = 5 if is_skill_expr_sheet else 3
            if is_skill_expr_sheet and len(headers) >= 5: header_keys = ["Concatenated Key", "Expression", "Ideal Expression", "ID", "Status"]; item_header_display = headers[0]
            elif not is_skill_expr_sheet and len(headers) >= 3: header_keys = ["Item", "ID", "Status"]; item_header_display = headers[0] if headers[0] else "Item"
            else: logging.warning(f"Sheet '{sheet_name}' unexpected header count ({len(headers)}). Skipping."); continue
            for row_idx, row in enumerate(sheet.iter_rows(min_row=2, max_col=max_cols), start=2):
                row_values = [cell.value for cell in row]
                if row_values and row_values[0] is not None and str(row_values[0]).strip() != "":
                    row_data = {header_keys[i]: row_values[i] if i < len(row_values) else None for i in range(max_cols)}; row_data['Header'] = item_header_display; data.append(row_data)
            comparison_data[sheet_name] = data; logging.info(f"Read {len(data)} valid rows from sheet '{sheet_name}'.")
        app.config['EXCEL_DATA'] = comparison_data; app.config['COMPARISON_SHEETS'] = comparison_sheet_names; app.config['EXCEL_FILENAME'] = filename; return True
    except FileNotFoundError: logging.error(f"Excel file not found: {filename}"); app.config['EXCEL_DATA'] = {}; app.config['COMPARISON_SHEETS'] = []; app.config['EXCEL_FILENAME'] = filename; return False
    except InvalidFileException: logging.error(f"Invalid Excel file format: {filename}"); app.config['EXCEL_DATA'] = {}; app.config['COMPARISON_SHEETS'] = []; app.config['EXCEL_FILENAME'] = filename; return False
    except Exception as e: logging.error(f"Error reading Excel file '{filename}': {e}", exc_info=True); app.config['EXCEL_DATA'] = {}; app.config['COMPARISON_SHEETS'] = []; app.config['EXCEL_FILENAME'] = filename; return False
    finally:
        if workbook:
            try: workbook.close(); logging.debug("Workbook closed after reading.")
            except Exception as close_e: logging.warning(f"Error closing workbook: {close_e}")


# get_comparison_data_or_reload (no changes)
def get_comparison_data_or_reload() -> Tuple[Optional[str], Optional[str]]:
    """Gets cached data or triggers reload if cache is empty."""
    if not app.config.get('EXCEL_DATA') or not app.config.get('EXCEL_FILENAME'):
        logging.info("Excel data cache is empty, attempting reload."); latest_file = find_latest_processed_file()
        if not latest_file: error = "No '*_processed.xlsx' file found."; logging.warning(error); return None, error
        else:
            if not read_comparison_data(latest_file): error = f"Failed to read/process '{latest_file}'."; logging.error(error); return latest_file, error
            else: return latest_file, None
    else: return app.config['EXCEL_FILENAME'], None


# --- Flask Routes ---
# index (no changes needed from v3)
@app.route('/')
def index():
    """Redirects to the first available comparison sheet or shows error."""
    filename, error = get_comparison_data_or_reload()
    # Pass skill_expr_sheet_name even on error for template consistency
    if error: return render_template_string( HTML_TEMPLATE, title="Error", comparison_data={}, page_data=[], pagination=None, filename=filename or "N/A", available_sheets=[], current_comparison_type=None, sort_by=None, sort_order=None, page_size_str='N/A', page_size_options=PAGE_SIZE_OPTIONS, comparison_suffix=COMPARISON_SUFFIX, error=error, skill_expr_sheet_name=SKILL_EXPR_SHEET_NAME )
    available_sheets = app.config.get('COMPARISON_SHEETS', [])
    if available_sheets: return redirect(url_for('view_comparison', comparison_type=available_sheets[0]))
    else: return render_template_string( HTML_TEMPLATE, title="No Data", comparison_data={}, page_data=[], pagination=None, filename=filename or "N/A", available_sheets=[], current_comparison_type=None, sort_by=None, sort_order=None, page_size_str='N/A', page_size_options=PAGE_SIZE_OPTIONS, comparison_suffix=COMPARISON_SUFFIX, error="No comparison sheets found in the Excel file.", skill_expr_sheet_name=SKILL_EXPR_SHEET_NAME )


# view_comparison (FIXED sort_key definition)
@app.route('/view/<comparison_type>')
def view_comparison(comparison_type):
    """Displays a specific comparison type with pagination and sorting."""
    filename, error = get_comparison_data_or_reload();
    if error: return redirect(url_for('index'))
    all_data = app.config.get('EXCEL_DATA', {}); available_sheets = app.config.get('COMPARISON_SHEETS', [])
    if comparison_type not in all_data: logging.warning(f"Invalid comparison type '{comparison_type}'."); return redirect(url_for('index'))
    page = request.args.get('page', 1, type=int); page_size_str = request.args.get('size', str(DEFAULT_PAGE_SIZE), type=str).lower()
    is_skill_expr_sheet = (comparison_type == SKILL_EXPR_SHEET_NAME); default_sort_col = 'Concatenated Key' if is_skill_expr_sheet else 'Item'; sort_by = request.args.get('sort_by', default_sort_col, type=str); sort_order = request.args.get('order', 'asc', type=str).lower()
    if page < 1: page = 1;
    if sort_order not in ['asc', 'desc']: sort_order = 'asc'
    if is_skill_expr_sheet: valid_sort_columns = ['Concatenated Key', 'Expression', 'Ideal Expression', 'ID', 'Status']
    else: valid_sort_columns = ['Item', 'ID', 'Status']
    if sort_by not in valid_sort_columns: sort_by = default_sort_col
    show_all = (page_size_str == 'all'); page_size = DEFAULT_PAGE_SIZE
    if not show_all:
        try: requested_size = int(page_size_str); page_size = requested_size if requested_size in PAGE_SIZE_OPTIONS else DEFAULT_PAGE_SIZE
        except ValueError: page_size_str = str(DEFAULT_PAGE_SIZE)
    current_data = all_data.get(comparison_type, []); total_items = len(current_data)

    # --- Sorting ---
    logging.debug(f"Sorting '{comparison_type}' data by '{sort_by}' ({sort_order})")
    reverse_sort = (sort_order == 'desc')

    # --- CORRECTED sort_key function definition ---
    def sort_key(item):
        """Generate a sort key, handling None and converting types."""
        value = item.get(sort_by) # Use the correct key based on sort_by parameter
        if value is None:
            # Place None values consistently (e.g., at the end when ascending)
            return (1, float('inf')) if sort_order == 'asc' else (0, float('-inf'))
        try:
            if sort_by == 'ID':
                try:
                    # Attempt numeric sort for ID, group numbers first
                    return (0, float(value))
                except (ValueError, TypeError):
                     # Treat non-numeric IDs as strings, group after numbers
                    return (1, str(value).lower())
            # Default: Case-insensitive string sort for other columns
            return (0, str(value).lower())
        except Exception as e:
            logging.warning(f"Could not process value '{value}' for sorting by '{sort_by}': {e}")
             # Final fallback: treat as string, group after potential numbers/valid strings
            return (2, str(value).lower())
    # --- End of corrected sort_key function ---

    try:
        sorted_data = sorted(current_data, key=sort_key, reverse=reverse_sort)
    except Exception as sort_e:
        logging.error(f"Error during sorting: {sort_e}", exc_info=True)
        error = f"Error sorting data by {sort_by}. Displaying unsorted."
        sorted_data = current_data # Fallback to unsorted

    # --- Pagination ---
    if show_all:
        page = 1; total_pages = 1 if total_items > 0 else 0; start_index = 0; end_index = total_items; page_data = sorted_data
    elif total_items > 0:
        total_pages = math.ceil(total_items / page_size); page = min(page, total_pages); start_index = (page - 1) * page_size; end_index = start_index + page_size; page_data = sorted_data[start_index:end_index]
    else:
        total_pages = 0; start_index = 0; end_index = 0; page_data = []

    pagination_info = { 'page': page, 'total_pages': total_pages, 'total_items': total_items, 'has_prev': page > 1 and not show_all, 'prev_num': page - 1, 'has_next': page < total_pages and not show_all, 'next_num': page + 1, 'start_item': min(start_index + 1, total_items) if total_items > 0 else 0, 'end_item': min(end_index, total_items) }
    logging.debug(f"Pagination for '{comparison_type}': Page {page}/{total_pages}, Size='{page_size_str}', Items {pagination_info['start_item']}-{pagination_info['end_item']} of {total_items}")

    # --- Render ---
    return render_template_string(
        HTML_TEMPLATE,
        title=comparison_type.replace(COMPARISON_SUFFIX, ''),
        comparison_data=all_data,
        page_data=page_data,
        pagination=pagination_info,
        filename=filename,
        available_sheets=available_sheets,
        current_comparison_type=comparison_type,
        sort_by=sort_by,
        sort_order=sort_order,
        page_size_str=page_size_str,
        page_size_options=PAGE_SIZE_OPTIONS,
        comparison_suffix=COMPARISON_SUFFIX,
        skill_expr_sheet_name=SKILL_EXPR_SHEET_NAME,
        error=error
    )


# refresh_data (no changes)
@app.route('/refresh')
def refresh_data():
    """Clears the cache and reloads data, then redirects."""
    logging.info("Refresh request received. Clearing data cache."); app.config['EXCEL_DATA'] = {}; app.config['EXCEL_FILENAME'] = None; app.config['COMPARISON_SHEETS'] = []; return redirect(url_for('index'))


# --- Main Execution ---
if __name__ == '__main__':
    logging.info("Starting Flask Comparison Results Viewer...")
    print("Starting UI Viewer...")
    print(f"Log file: {LOG_FILE_UI}")
    # Ensure template directory exists
    if not os.path.exists(TEMPLATE_DIR):
        try: os.makedirs(TEMPLATE_DIR); logging.info(f"Created missing template directory: {TEMPLATE_DIR}"); print(f"Created template directory: {TEMPLATE_DIR}")
        except OSError as e: logging.error(f"Could not create template directory {TEMPLATE_DIR}: {e}"); print(f"ERROR: Could not create template directory {TEMPLATE_DIR}. Please create it manually.")
    print("Attempting to find and load the latest '*_processed.xlsx' file...")
    _, initial_error = get_comparison_data_or_reload()
    if initial_error: print(f"Initial data load failed: {initial_error}")
    try:
        print(f"\nViewer running. Open your web browser and go to http://127.0.0.1:5001\n")
        # Set debug=True for development to see errors easily, but False for stability
        app.run(host='127.0.0.1', port=5001, debug=False, threaded=True)
    except OSError as e:
        if "address already in use" in str(e).lower(): err_msg = "Port 5001 is already in use."; logging.error(err_msg); print(f"ERROR: {err_msg}")
        else: logging.error(f"Failed to start Flask server: {e}", exc_info=True); print(f"ERROR: Failed to start web server. See {LOG_FILE_UI} for details.")
    except Exception as e:
        logging.error(f"An unexpected error occurred: {e}", exc_info=True); print(f"FATAL: An unexpected error occurred. See {LOG_FILE_UI} for details.")

